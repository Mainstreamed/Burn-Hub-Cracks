-- Burn Hub / Fallen

--[[ AntiCheat Bypasser ]]--
game.Players.LocalPlayer.UserId = 47983795

wait()

local namecall; namecall = hookmetamethod(game,"__namecall",function(self,...)
local args = {...}
local method = getnamecallmethod()

if method == "FireServer" and self.Name == "BanExploiter" then
  return
elseif method == "GetChildren" and self.Name == "Remotes" then
  return {}
end

return namecall(self,unpack(args))
end)
--[[ AntiCheat Bypasser ]]--

local gmt = getrawmetatable(game)
setreadonly(gmt, false)
local oldindex = gmt.__index
local Players = game:GetService("Players");
local LocalPlayer = Players.LocalPlayer;
local Mouse = LocalPlayer:GetMouse();
local Cameras = game:GetService("Workspace").Camera;
local CurrentCamera = game:GetService("Workspace").CurrentCamera
local worldToViewportPoint = CurrentCamera.worldToViewportPoint
local HeadOff = Vector3.new(0, 0.5, 0)
local LegOff = Vector3.new(0,3,0)
local XRTransparency = 0.9
local _Character = getrenv()._G.Character;
local SoundService = game:GetService("SoundService")

--// Macros
if not LPH_OBFUSCATED then
  LPH_JIT = function(...) return ... end
  LPH_JIT_MAX = function(...) return ... end
  LPH_JIT_ULTRA = function(...) return ... end
  LPH_NO_VIRTUALIZE = function(...) return ... end
  LPH_NO_UPVALUES = function(f) return(function(...) return f(...) end) end
  LPH_ENCSTR = function(...) return ... end
  LPH_STRENC = function(...) return ... end
  LPH_HOOK_FIX = function(...) return ... end
  LPH_CRASH = function() return print(debug.traceback()) end
  end;

  --// Load Libraries

  local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/Library.lua'))()
  local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/DemoExists/LinoriaLib/main/addons/SaveManager.lua'))()
  local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/addons/ThemeManager.lua'))()
  local ESPLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/DemoExists/Oblivity-2.0/main/Modules/ESP.lua"))()

  --// Utility
  local utility = {
    services = {
      players = game:GetService("Players"),
      workspace = game:GetService("Workspace"),
      userinputservice = game:GetService("UserInputService"),
      runservice = game:GetService("RunService"),
      httpservice = game:GetService("HttpService"),
      coregui = game:GetService("CoreGui"),
      lighting = game:GetService("Lighting"),
      guiservice = game:GetService("GuiService"),
      replicatedstorage = game:GetService("ReplicatedStorage"),
      networkclient = game:GetService("NetworkClient")
    },
    aimbot = {
      target = nil
    },
    functions = {},
    }

    --// Variables
    local localplayer = utility.services.players.LocalPlayer
    local camera = utility.services.workspace.CurrentCamera
    local mouse = localplayer:GetMouse()

    --// Localisation
    local drawing_new = Drawing.new
    local color3_new, color3_fromrgb = Color3.new, Color3.fromRGB
    local vector3_new, vector2_new = Vector3.new, Vector2.new
    local math_huge, math_floor, math_ceil = math.huge, math.floor, math.ceil
    local getguiinset = utility.services.guiservice.GetGuiInset
    local ray_new = Ray.new

    --// Create UI
    local Window = Library:CreateWindow({
      Title = 'Burn Hub | Rage | Fallen',
      Center = true,
      AutoShow = true,
    })

    local Tabs = {
      VisualsTab = Window:AddTab('Visuals'),
      CombatTab = Window:AddTab('Combat'),
      PlayerTab = Window:AddTab('Player'),
      ExploitsTab = Window:AddTab('Exploits'),
      UISettings = Window:AddTab('UI Settings'),
    }

    --// Snapline
    local Snapline_Object = drawing_new("Line")
    Snapline_Object.Visible = false
    Snapline_Object.Thickness = 1
    Snapline_Object.Transparency = 1
    Snapline_Object.From = vector2_new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    Snapline_Object.To = vector2_new(camera.ViewportSize.X /  2, camera.ViewportSize.Y / 2)
    Snapline_Object.Color = color3_fromrgb(255, 255, 255)

    do
      do
        --// Visuals Tab
        do
          --// Player ESP
          do
            local VisualsTabBox = Tabs.VisualsTab:AddLeftTabbox('Player Visuals')
            local PlayerESPTab = VisualsTabBox:AddTab('Player ESP')
            local PlayerESPSettingsTab = VisualsTabBox:AddTab("Settings")

            local ChamsTabBox = Tabs.VisualsTab:AddRightTabbox('Chams')
            local ChamsTab = ChamsTabBox:AddTab('Chams')

            --// Player ESP
            do
              PlayerESPTab:AddToggle('PlayerESP_Toggle', {Text = 'Toggle', Default = false}):OnChanged(function()
              esp.enabled = Toggles.PlayerESP_Toggle.Value
              end)

              PlayerESPTab:AddSlider('PlayerESP_MaxDistance', {Text = 'Max Dist', Default = 0, Min = 0, Max = 10000, Rounding = 0, Compact = true, Tooltip = "Set to 0 for No Limit"}):OnChanged(function()
              esp.maxdist = Options.PlayerESP_MaxDistance.Value
              end)

              --//Name ESP
              do
                PlayerESPTab:AddToggle('PlayerESP_NameToggle', {Text = 'Name', Default = false}):AddColorPicker("PlayerESP_NameColor", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                esp.settings.name.enabled = Toggles.PlayerESP_NameToggle.Value
                end)

                Options.PlayerESP_NameColor:OnChanged(function()
                esp.settings.name.color = Options.PlayerESP_NameColor.Value
                end)
              end

              --//Box ESP
              do
                PlayerESPTab:AddToggle('PlayerESP_BoxToggle', {Text = 'Box', Default = false}):AddColorPicker("PlayerESP_BoxColor", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                esp.settings.box.enabled = Toggles.PlayerESP_BoxToggle.Value
                end)

                Options.PlayerESP_BoxColor:OnChanged(function()
                esp.settings.box.color = Options.PlayerESP_BoxColor.Value
                print("fax")
                end)
              end

              --//Filled Box ESP
              do
                PlayerESPTab:AddToggle('PlayerESP_FilledBoxToggle', {Text = 'Filled Box', Default = false}):AddColorPicker("PlayerESP_FilledBoxColor", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                esp.settings.filledbox.enabled = Toggles.PlayerESP_FilledBoxToggle.Value
                end)

                Options.PlayerESP_FilledBoxColor:OnChanged(function()
                esp.settings.filledbox.color = Options.PlayerESP_FilledBoxColor.Value
                print("yes")
                end)

                PlayerESPTab:AddSlider('PlayerESP_FilledBoxTransparency', {Text = 'fill transparency', Default = 1, Min = 0, Max = 1, Rounding = 2, Compact = true}):OnChanged(function()
                esp.settings.filledbox.transparency = Options.PlayerESP_FilledBoxTransparency.Value
                end)
              end

              --//Health ESP
              do
                --// Health Bar

                PlayerESPTab:AddToggle('PlayerESP_HealthBarToggle', {Text = 'Health Bar', Default = false}):OnChanged(function()
                esp.settings.healthbar.enabled = Toggles.PlayerESP_HealthBarToggle.Value
                end)

                --// Health Text

                PlayerESPTab:AddToggle('PlayerESP_HealthTextToggle', {Text = 'Health Text', Default = false}):AddColorPicker("PlayerESP_HealthTextColor", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                esp.settings.healthtext.enabled = Toggles.PlayerESP_HealthTextToggle.Value
                end)

                Options.PlayerESP_HealthTextColor:OnChanged(function()
                esp.settings.healthtext.color = Options.PlayerESP_HealthTextColor.Value
                end)
              end

              --//Distance ESP
              do
                PlayerESPTab:AddToggle('PlayerESP_DistanceToggle', {Text = 'Distance', Default = false}):AddColorPicker("PlayerESP_DistanceColor", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                esp.settings.distance.enabled = Toggles.PlayerESP_DistanceToggle.Value
                end)

                Options.PlayerESP_DistanceColor:OnChanged(function()
                esp.settings.distance.color = Options.PlayerESP_DistanceColor.Value
                end)
              end

              --//Tool ESP
              do
                PlayerESPTab:AddToggle('PlayerESP_ToolToggle', {Text = 'Tool', Default = false}):AddColorPicker("PlayerESP_ToolColor", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                esp.settings.weapon.enabled = Toggles.PlayerESP_ToolToggle.Value
                end)

                Options.PlayerESP_ToolColor:OnChanged(function()
                esp.settings.weapon.color = Options.PlayerESP_ToolColor.Value
                end)
              end

              --//View Angle ESP
              do
                PlayerESPTab:AddToggle('PlayerESP_ViewAngleToggle', {Text = 'View Angle', Default = false}):AddColorPicker("PlayerESP_ViewAngleColor", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                esp.settings.viewangle.enabled = Toggles.PlayerESP_ViewAngleToggle.Value
                end)

                Options.PlayerESP_ViewAngleColor:OnChanged(function()
                esp.settings.viewangle.color = Options.PlayerESP_ViewAngleColor.Value
                end)
              end

              PlayerESPTab:AddToggle('Radar_Toggle', {Text = 'Radar', Default = false}):OnChanged(function()
              local Players = game:service("Players")
              local Player = Players.LocalPlayer
              local Mouse = Player:GetMouse()
              local Camera = game:service("Workspace").CurrentCamera
              local RS = game:service("RunService")
              local UIS = game:service("UserInputService")

              repeat wait() until Player.Character ~= nil and Player.Character.PrimaryPart ~= nil

                local LerpColorModule = loadstring(game:HttpGet("https://pastebin.com/raw/wRnsJeid"))()
                local HealthBarLerp = LerpColorModule:Lerp(Color3.fromRGB(255, 0, 0), Color3.fromRGB(0, 255, 0))

                local function NewCircle(Transparency, Color, Radius, Filled, Thickness)
                  local c = Drawing.new("Circle")
                  c.Transparency = Transparency
                  c.Color = Color
                  c.Visible = false
                  c.Thickness = Thickness
                  c.Position = Vector2.new(0, 0)
                  c.Radius = Radius
                  c.NumSides = math.clamp(Radius*55/100, 10, 75)
                  c.Filled = Filled
                  return c
                end

                local RadarInfo = {
                  Position = Vector2.new(200, 200),
                  Radius = 100,
                  Scale = 1, -- Determinant factor on the effect of the relative position for the 2D integration
                  RadarBack = Color3.fromRGB(10, 10, 10),
                  RadarBorder = Color3.fromRGB(75, 75, 75),
                  LocalPlayerDot = Color3.fromRGB(255, 255, 255),
                  PlayerDot = Color3.fromRGB(60, 170, 255),
                  Team = Color3.fromRGB(0, 255, 0),
                  Enemy = Color3.fromRGB(255, 0, 0),
                  Health_Color = true,
                  Team_Check = true
                }

                local RadarBackground = NewCircle(0.9, RadarInfo.RadarBack, RadarInfo.Radius, true, 1)
                RadarBackground.Visible = true
                RadarBackground.Position = RadarInfo.Position

                local RadarBorder = NewCircle(0.75, RadarInfo.RadarBorder, RadarInfo.Radius, false, 3)
                RadarBorder.Visible = true
                RadarBorder.Position = RadarInfo.Position

                local function GetRelative(pos)
                  local char = Player.Character
                  if char ~= nil and char.PrimaryPart ~= nil then
                    local pmpart = char.PrimaryPart
                    local camerapos = Vector3.new(Camera.CFrame.Position.X, pmpart.Position.Y, Camera.CFrame.Position.Z)
                    local newcf = CFrame.new(pmpart.Position, camerapos)
                    local r = newcf:PointToObjectSpace(pos)
                    return r.X, r.Z
                  else
                    return 0, 0
                  end
                end

                local function PlaceDot(plr)
                  local PlayerDot = NewCircle(1, RadarInfo.PlayerDot, 3, true, 1)

                  local function Update()
                    local c
                    c = game:service("RunService").RenderStepped:Connect(function()
                    local char = plr.Character
                    if char and char:FindFirstChildOfClass("Humanoid") and char.PrimaryPart ~= nil and char:FindFirstChildOfClass("Humanoid").Health > 0 then
                      local hum = char:FindFirstChildOfClass("Humanoid")
                      local scale = RadarInfo.Scale
                      local relx, rely = GetRelative(char.PrimaryPart.Position)
                      local newpos = RadarInfo.Position - Vector2.new(relx * scale, rely * scale)

                      if (newpos - RadarInfo.Position).magnitude < RadarInfo.Radius-2 then
                        PlayerDot.Radius = 3
                        PlayerDot.Position = newpos
                        PlayerDot.Visible = true
                      else
                        local dist = (RadarInfo.Position - newpos).magnitude
                        local calc = (RadarInfo.Position - newpos).unit * (dist - RadarInfo.Radius)
                        local inside = Vector2.new(newpos.X + calc.X, newpos.Y + calc.Y)
                        PlayerDot.Radius = 2
                        PlayerDot.Position = inside
                        PlayerDot.Visible = true
                      end

                      PlayerDot.Color = RadarInfo.PlayerDot
                      if RadarInfo.Team_Check then
                        if plr.TeamColor == Player.TeamColor then
                          PlayerDot.Color = RadarInfo.Team
                        else
                          PlayerDot.Color = RadarInfo.Enemy
                        end
                      end

                      if RadarInfo.Health_Color then
                        PlayerDot.Color = HealthBarLerp(hum.Health / hum.MaxHealth)
                      end
                    else
                      PlayerDot.Visible = false
                      if Players:FindFirstChild(plr.Name) == nil then
                        PlayerDot:Remove()
                        c:Disconnect()
                      end
                    end
                    end)
                  end
                  coroutine.wrap(Update)()
                end

                for _,v in pairs(Players:GetChildren()) do
                  if v.Name ~= Player.Name then
                    PlaceDot(v)
                  end
                end

                local function NewLocalDot()
                  local d = Drawing.new("Triangle")
                  d.Visible = true
                  d.Thickness = 1
                  d.Filled = true
                  d.Color = RadarInfo.LocalPlayerDot
                  d.PointA = RadarInfo.Position + Vector2.new(0, -6)
                  d.PointB = RadarInfo.Position + Vector2.new(-3, 6)
                  d.PointC = RadarInfo.Position + Vector2.new(3, 6)
                  return d
                end

                local LocalPlayerDot = NewLocalDot()

                Players.PlayerAdded:Connect(function(v)
                if v.Name ~= Player.Name then
                  PlaceDot(v)
                end
                LocalPlayerDot:Remove()
                LocalPlayerDot = NewLocalDot()
                end)

                -- Loop
                coroutine.wrap(function()
                local c
                c = game:service("RunService").RenderStepped:Connect(function()
                if LocalPlayerDot ~= nil then
                  LocalPlayerDot.Color = RadarInfo.LocalPlayerDot
                  LocalPlayerDot.PointA = RadarInfo.Position + Vector2.new(0, -6)
                  LocalPlayerDot.PointB = RadarInfo.Position + Vector2.new(-3, 6)
                  LocalPlayerDot.PointC = RadarInfo.Position + Vector2.new(3, 6)
                end
                RadarBackground.Position = RadarInfo.Position
                RadarBackground.Radius = RadarInfo.Radius
                RadarBackground.Color = RadarInfo.RadarBack

                RadarBorder.Position = RadarInfo.Position
                RadarBorder.Radius = RadarInfo.Radius
                RadarBorder.Color = RadarInfo.RadarBorder
                end)
                end)()

                -- Draggable
                local inset = game:service("GuiService"):GetGuiInset()

                local dragging = false
                local offset = Vector2.new(0, 0)
                UIS.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and (Vector2.new(Mouse.X, Mouse.Y + inset.Y) - RadarInfo.Position).magnitude < RadarInfo.Radius then
                  offset = RadarInfo.Position - Vector2.new(Mouse.X, Mouse.Y)
                  dragging = true
                end
                end)

                UIS.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                  dragging = false
                end
                end)

                coroutine.wrap(function()
                local dot = NewCircle(1, Color3.fromRGB(255, 255, 255), 3, true, 1)
                local c
                c = game:service("RunService").RenderStepped:Connect(function()
                if (Vector2.new(Mouse.X, Mouse.Y + inset.Y) - RadarInfo.Position).magnitude < RadarInfo.Radius then
                  dot.Position = Vector2.new(Mouse.X, Mouse.Y + inset.Y)
                  dot.Visible = true
                else
                  dot.Visible = false
                end
                if dragging then
                  RadarInfo.Position = Vector2.new(Mouse.X, Mouse.Y) + offset
                end
                end)
                end)()

                --[[ Example:
                wait(3)
                RadarInfo.Position = Vector2.new(300, 300)
                RadarInfo.Radius = 150
                RadarInfo.RadarBack = Color3.fromRGB(50, 0, 0)
                ]]

                PlayerESPTab:AddDivider()

                --// Settings
                do
                  PlayerESPTab:AddToggle('PlayerESP_DisplayNames', {Text = 'Show Display Names', Default = false}):OnChanged(function()
                  esp.settings.name.displaynames = Toggles.PlayerESP_DisplayNames.Value
                  end)

                  PlayerESPTab:AddToggle('PlayerESP_Outlines', {Text = 'Show Outlines', Default = false}):OnChanged(function()
                  for i,v in pairs(esp.settings) do
                    v.outline = Toggles.PlayerESP_Outlines.Value
                  end
                  end)

                  PlayerESPTab:AddToggle('PlayerESP_HideFriendlies', {Text = 'Hide Teammates', Default = false}):OnChanged(function()
                  esp.teamcheck = Toggles.PlayerESP_HideFriendlies.Value
                  end)

                  PlayerESPSettingsTab:AddLabel("Font Options")
                  PlayerESPSettingsTab:AddDivider()

                  PlayerESPSettingsTab:AddSlider('PlayerESP_FontSize', {Text = 'Font Size', Default = 13, Min = 0, Max = 100, Rounding = 0, Compact = false}):OnChanged(function()
                  esp.fontsize = Options.PlayerESP_FontSize.Value
                  end)

                  PlayerESPSettingsTab:AddDropdown('PlayerESP_FontFamily', {Values = { 'UI', 'System', 'Plex', 'Monospace' }, Default = 3, Multi = false, Text = 'Font Family'}):OnChanged(function()
                  if Options.PlayerESP_FontFamily.Value == "UI" then
                    esp.font = 0
                  elseif Options.PlayerESP_FontFamily.Value == "System" then
                    esp.font = 1
                  elseif Options.PlayerESP_FontFamily.Value == "Plex" then
                    esp.font = 2
                  elseif Options.PlayerESP_FontFamily.Value == "Monospace" then
                    esp.font = 3
                  end
                  end)

                  PlayerESPSettingsTab:AddLabel("Sizing Options")
                  PlayerESPSettingsTab:AddDivider()

                  PlayerESPSettingsTab:AddSlider('PlayerESP_HealthBarSize', {Text = 'Health Bar Size', Default = 3, Min = 1, Max = 5, Rounding = 0, Compact = false}):OnChanged(function()
                  esp.settings.healthbar.size = Options.PlayerESP_HealthBarSize.Value
                  end)

                  PlayerESPSettingsTab:AddSlider('PlayerESP_ViewAngleSize', {Text = 'View Angle Size', Default = 10, Min = 1, Max = 100, Rounding = 0, Compact = false}):OnChanged(function()
                  esp.settings.viewangle.size = Options.PlayerESP_ViewAngleSize.Value
                  end)
                end
              end
              )
              --// Player Chams
              do
                ChamsTab:AddToggle('Chams_Toggle', {Text = 'Toggle', Default = false}):AddColorPicker("Chams_FillColor", {Default = Color3.fromRGB(255, 255, 255), Tooltip = "Fill"}):AddColorPicker("Chams_OutlineColor", {Default = Color3.fromRGB(0, 0, 0), Tooltip = "Outline"}):OnChanged(function()
                esp.settings_chams.enabled = Toggles.Chams_Toggle.Value
                end)

                Options.Chams_FillColor:OnChanged(function()
                esp.settings_chams.fill_color = Options.Chams_FillColor.Value
                end)
                Options.Chams_OutlineColor:OnChanged(function()
                esp.settings_chams.outline_color = Options.Chams_OutlineColor.Value
                end)

                ChamsTab:AddToggle('Chams_AutoColorToggle', {Text = 'Auto Color', Default = false}):AddColorPicker("Chams_VisibleColor", {Default = Color3.fromRGB(0, 255, 0), Tooltip = "Visible"}):AddColorPicker("Chams_InvisibleColor", {Default = Color3.fromRGB(255, 0, 0), Tooltip = "Invisible"}):OnChanged(function()
                esp.settings_chams.autocolor = Toggles.Chams_AutoColorToggle.Value
                end)

                Options.Chams_VisibleColor:OnChanged(function()
                esp.settings_chams.visible_Color = Options.Chams_VisibleColor.Value
                end)
                Options.Chams_InvisibleColor:OnChanged(function()
                esp.settings_chams.invisible_Color = Options.Chams_InvisibleColor.Value
                end)

                ChamsTab:AddDivider()

                ChamsTab:AddToggle('Chams_Outline', {Text = 'Outline', Default = false}):OnChanged(function()
                esp.settings_chams.outline = Toggles.Chams_Outline.Value
                end)
                ChamsTab:AddToggle('Chams_HideFriendlies', {Text = 'Hide Teammates', Default = false}):OnChanged(function()
                esp.settings_chams.teamcheck = Toggles.Chams_HideFriendlies.Value
                end)

                ChamsTab:AddSlider('Chams_FillTransparency', {Text = 'Fill Transparency', Default = esp.settings_chams.fill_transparency, Min = 0, Max = 1, Rounding = 2, Compact = false}):OnChanged(function()
                esp.settings_chams.fill_transparency = Options.Chams_FillTransparency.Value
                end)

                ChamsTab:AddSlider('Chams_OutlineTransparency', {Text = 'Outline Transparency', Default = esp.settings_chams.fill_transparency, Min = 0, Max = 1, Rounding = 2, Compact = false}):OnChanged(function()
                esp.settings_chams.outline_transparency = Options.Chams_OutlineTransparency.Value
                end)
              end
            end

            --// Other Drawing Objects
            do
              local OtherDrawingObjectsTabBox = Tabs.VisualsTab:AddRightTabbox('Other Drawing Objects')
              local SnaplineTab = OtherDrawingObjectsTabBox:AddTab('Snapline')
              local CrosshairTab = OtherDrawingObjectsTabBox:AddTab('Crosshair')

              do
                do
                  SnaplineTab:AddToggle('Snapline_Toggle', {Text = 'Toggle', Default = false}):AddColorPicker("Snapline_Color", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                  Snapline_Object.Visible = Toggles.Snapline_Toggle.Value
                  end)

                  Options.Snapline_Color:OnChanged(function()
                  Snapline_Object.Color = Options.Snapline_Color.Value
                  end)

                  SnaplineTab:AddSlider('Snapline_Thickness', {Text = 'Thickness', Default = 1, Min = 0.5, Max = 5, Rounding = 1, Compact = false}):OnChanged(function()
                  Snapline_Object.Thickness = Options.Snapline_Thickness.Value
                  end)

                  SnaplineTab:AddSlider('Snapline_Transparency', {Text = 'Transparency', Default = 1, Min = 0, Max = 1, Rounding = 2, Compact = false}):OnChanged(function()
                  Snapline_Object.Transparency = Options.Snapline_Transparency.Value
                  end)

                  SnaplineTab:AddDropdown('Snapline_TargetPart', {Values = { 'Head', 'HumanoidRootPart' }, Default = 1, Multi = false, Text = 'Snap To'})
                end

                --// Crosshair
                local Crosshair_Horizontal = drawing_new("Line")
                Crosshair_Horizontal.Visible = false
                Crosshair_Horizontal.Thickness = 1
                Crosshair_Horizontal.Transparency = 1
                Crosshair_Horizontal.From = vector2_new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                Crosshair_Horizontal.To = vector2_new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                Crosshair_Horizontal.Color = color3_fromrgb(255, 255, 255)

                local Crosshair_Vertical = drawing_new("Line")
                Crosshair_Vertical.Visible = false
                Crosshair_Vertical.Thickness = 1
                Crosshair_Vertical.Transparency = 1
                Crosshair_Vertical.From = vector2_new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                Crosshair_Vertical.To = vector2_new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                Crosshair_Vertical.Color = color3_fromrgb(255, 255, 255)
                do
                  CrosshairTab:AddToggle('Crosshair_Toggle', {Text = 'Toggle', Default = false}):AddColorPicker("Crosshair_Color", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                  Crosshair_Horizontal.Visible = Toggles.Crosshair_Toggle.Value
                  Crosshair_Vertical.Visible = Toggles.Crosshair_Toggle.Value
                  end)

                  Options.Crosshair_Color:OnChanged(function()
                  Crosshair_Horizontal.Color = Options.Crosshair_Color.Value
                  Crosshair_Vertical.Color = Options.Crosshair_Color.Value
                  end)

                  CrosshairTab:AddSlider('Crosshair_Size', {Text = 'Size', Default = 10, Min = 0, Max = 100, Rounding = 1, Compact = false}):OnChanged(function()
                  Crosshair_Horizontal.From = vector2_new(camera.ViewportSize.X / 2 - Options.Crosshair_Size.Value, camera.ViewportSize.Y / 2)
                  Crosshair_Horizontal.To = vector2_new(camera.ViewportSize.X / 2 + Options.Crosshair_Size.Value, camera.ViewportSize.Y / 2)
                  Crosshair_Vertical.From = vector2_new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2 - Options.Crosshair_Size.Value)
                  Crosshair_Vertical.To = vector2_new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2 + Options.Crosshair_Size.Value)
                  end)

                  CrosshairTab:AddSlider('Crosshair_Thickness', {Text = 'Thickness', Default = 1, Min = 0.5, Max = 5, Rounding = 1, Compact = false}):OnChanged(function()
                  Crosshair_Horizontal.Thickness = Options.Crosshair_Thickness.Value
                  Crosshair_Vertical.Thickness = Options.Crosshair_Thickness.Value
                  end)

                  CrosshairTab:AddSlider('Crosshair_Transparency', {Text = 'Transparency', Default = 1, Min = 0, Max = 1, Rounding = 2, Compact = false}):OnChanged(function()
                  Crosshair_Horizontal.Transparency = Options.Crosshair_Transparency.Value
                  Crosshair_Vertical.Transparency = Options.Crosshair_Transparency.Value
                  end)
                end

                local FOVCircleAimbotBox = Tabs.CombatTab:AddRightTabbox('FOV Circle')
                local FOVCircleAimbot = FOVCircleAimbotBox:AddTab('Aimlock FOV')

                --// FOV Circle
                local FOVCircle_Object = drawing_new("Circle")
                FOVCircle_Object.Visible = false
                FOVCircle_Object.Color = color3_fromrgb(255, 255, 255)
                FOVCircle_Object.Radius = 100
                FOVCircle_Object.Thickness = 1
                FOVCircle_Object.Filled = false
                FOVCircle_Object.Transparency = 1
                FOVCircle_Object.Position = vector2_new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                do
                  FOVCircleAimbot:AddToggle('FOVCircle_Toggle', {Text = 'Toggle', Default = false}):AddColorPicker("FOVCircle_Color", {Default = Color3.fromRGB(255, 255, 255)}):OnChanged(function()
                  FOVCircle_Object.Visible = Toggles.FOVCircle_Toggle.Value
                  end)

                  Options.FOVCircle_Color:OnChanged(function()
                  FOVCircle_Object.Color = Options.FOVCircle_Color.Value
                  end)

                  FOVCircleAimbot:AddToggle('FOVCircle_Filled', {Text = 'Filled', Default = false}):OnChanged(function()
                  FOVCircle_Object.Filled = Toggles.FOVCircle_Filled.Value
                  end)

                  FOVCircleAimbot:AddSlider('FOVCircle_Radius', {Text = 'Radius', Default = 100, Min = 0, Max = 750, Rounding = 0, Compact = false}):OnChanged(function()
                  FOVCircle_Object.Radius = Options.FOVCircle_Radius.Value
                  end)

                  FOVCircleAimbot:AddSlider('FOVCircle_Thickness', {Text = 'Thickness', Default = 1, Min = 0.5, Max = 5, Rounding = 1, Compact = false}):OnChanged(function()
                  FOVCircle_Object.Thickness = Options.FOVCircle_Thickness.Value
                  end)

                  FOVCircleAimbot:AddSlider('FOVCircle_Transparency', {Text = 'Transparency', Default = 1, Min = 0, Max = 1, Rounding = 2, Compact = false}):OnChanged(function()
                  FOVCircle_Object.Transparency = Options.FOVCircle_Transparency.Value
                  end)

                  FOVCircleAimbot:AddSlider('FOVCircle_NumSides', {Text = 'Num Sides', Default = 0, Min = 0, Max = 50, Rounding = 0, Compact = false}):OnChanged(function()
                  FOVCircle_Object.NumSides = Options.FOVCircle_NumSides.Value
                  end)
                end
              end


              --// World Lighting, Right Column
              --// World Lighting Main

              local WorldLightingTabBox = Tabs.VisualsTab:AddLeftTabbox('World & Lighting')
              local WorldTab = WorldLightingTabBox:AddTab('World')
              local LightingTab = WorldLightingTabBox:AddTab('Lighting')

              do
                --// Lighting
                do
                  LightingTab:AddToggle('Lighting_CustomTimeToggle', {Text = 'Custom Time', Default = false})
                  LightingTab:AddSlider('Lighting_CustomTimeValue', {Text = 'Custom Time', Default = 8, Min = 0, Max = 24, Rounding = 3, Compact = true})
                  LightingTab:AddToggle('Lighting_CustomAmbient', {Text = 'Custom Ambient', Default = false}):AddColorPicker("Lighting_CustomAmbientColor", {Default = Color3.fromRGB(0, 0, 0)}):OnChanged(function()
                  if not Toggles.Lighting_CustomAmbient.Value then
                    utility.services.lighting.Ambient = color3_fromrgb(0, 0, 0)
                  end
                  end)
                end

                local MyButton = LightingTab:AddButton('FullBright', function()

                if not _G.FullBrightExecuted then

                  _G.FullBrightEnabled = false

                  _G.NormalLightingSettings = {
                    Brightness = game:GetService("Lighting").Brightness,
                    ClockTime = game:GetService("Lighting").ClockTime,
                    FogEnd = game:GetService("Lighting").FogEnd,
                    GlobalShadows = game:GetService("Lighting").GlobalShadows,
                    Ambient = game:GetService("Lighting").Ambient
                  }

                  game:GetService("Lighting"):GetPropertyChangedSignal("Brightness"):Connect(function()
                  if game:GetService("Lighting").Brightness ~= 1 and game:GetService("Lighting").Brightness ~= _G.NormalLightingSettings.Brightness then
                    _G.NormalLightingSettings.Brightness = game:GetService("Lighting").Brightness
                    if not _G.FullBrightEnabled then
                      repeat
                        wait()
                      until _G.FullBrightEnabled
                    end
                    game:GetService("Lighting").Brightness = 1
                  end
                  end)

                  game:GetService("Lighting"):GetPropertyChangedSignal("ClockTime"):Connect(function()
                  if game:GetService("Lighting").ClockTime ~= 12 and game:GetService("Lighting").ClockTime ~= _G.NormalLightingSettings.ClockTime then
                    _G.NormalLightingSettings.ClockTime = game:GetService("Lighting").ClockTime
                    if not _G.FullBrightEnabled then
                      repeat
                        wait()
                      until _G.FullBrightEnabled
                    end
                    game:GetService("Lighting").ClockTime = 12
                  end
                  end)

                  game:GetService("Lighting"):GetPropertyChangedSignal("FogEnd"):Connect(function()
                  if game:GetService("Lighting").FogEnd ~= 786543 and game:GetService("Lighting").FogEnd ~= _G.NormalLightingSettings.FogEnd then
                    _G.NormalLightingSettings.FogEnd = game:GetService("Lighting").FogEnd
                    if not _G.FullBrightEnabled then
                      repeat
                        wait()
                      until _G.FullBrightEnabled
                    end
                    game:GetService("Lighting").FogEnd = 786543
                  end
                  end)

                  game:GetService("Lighting"):GetPropertyChangedSignal("GlobalShadows"):Connect(function()
                  if game:GetService("Lighting").GlobalShadows ~= false and game:GetService("Lighting").GlobalShadows ~= _G.NormalLightingSettings.GlobalShadows then
                    _G.NormalLightingSettings.GlobalShadows = game:GetService("Lighting").GlobalShadows
                    if not _G.FullBrightEnabled then
                      repeat
                        wait()
                      until _G.FullBrightEnabled
                    end
                    game:GetService("Lighting").GlobalShadows = false
                  end
                  end)

                  game:GetService("Lighting"):GetPropertyChangedSignal("Ambient"):Connect(function()
                  if game:GetService("Lighting").Ambient ~= Color3.fromRGB(178, 178, 178) and game:GetService("Lighting").Ambient ~= _G.NormalLightingSettings.Ambient then
                    _G.NormalLightingSettings.Ambient = game:GetService("Lighting").Ambient
                    if not _G.FullBrightEnabled then
                      repeat
                        wait()
                      until _G.FullBrightEnabled
                    end
                    game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
                  end
                  end)

                  game:GetService("Lighting").Brightness = 1
                  game:GetService("Lighting").ClockTime = 12
                  game:GetService("Lighting").FogEnd = 786543
                  game:GetService("Lighting").GlobalShadows = false
                  game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)

                  local LatestValue = true
                  spawn(function()
                  repeat
                    wait()
                  until _G.FullBrightEnabled
                  while wait() do
                    if _G.FullBrightEnabled ~= LatestValue then
                      if not _G.FullBrightEnabled then
                        game:GetService("Lighting").Brightness = _G.NormalLightingSettings.Brightness
                        game:GetService("Lighting").ClockTime = _G.NormalLightingSettings.ClockTime
                        game:GetService("Lighting").FogEnd = _G.NormalLightingSettings.FogEnd
                        game:GetService("Lighting").GlobalShadows = _G.NormalLightingSettings.GlobalShadows
                        game:GetService("Lighting").Ambient = _G.NormalLightingSettings.Ambient
                      else
                        game:GetService("Lighting").Brightness = 1
                        game:GetService("Lighting").ClockTime = 12
                        game:GetService("Lighting").FogEnd = 786543
                        game:GetService("Lighting").GlobalShadows = false
                        game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
                      end
                      LatestValue = not LatestValue
                    end
                  end
                  end)
                end

                _G.FullBrightExecuted = true
                _G.FullBrightEnabled = not _G.FullBrightEnabled
                end)

                --// World
                do
                  WorldTab:AddToggle('World_Shadows', {Text = 'Global Shadows', Default = utility.services.lighting.GlobalShadows}):OnChanged(function()
                  utility.services.lighting.GlobalShadows = Toggles.World_Shadows.Value
                  end)

                  WorldTab:AddToggle('World_Grass', {Text = 'Show Grass', Default = utility.services.lighting.GlobalShadows}):OnChanged(function()
                  sethiddenproperty(utility.services.workspace.Terrain, "Decoration", Toggles.World_Grass.Value)
                  end)

                  if utility.services.workspace.Terrain:FindFirstChild("Clouds") then
                    WorldTab:AddToggle('World_Clouds', {Text = 'Show Clouds', Default = utility.services.workspace.Terrain.Clouds.Enabled}):OnChanged(function()
                    utility.services.workspace.Terrain.Clouds.Enabled = Toggles.World_Clouds.Value
                    end)
                    local Terrain = game:GetService("Workspace").Terrain
                    local GCEN = Color3.fromRGB(93, 111, 55)
                    local GRCEND = false
                    WorldTab:AddToggle('CLRG',{
                      Text = 'Color Grass',
                      Default = true,
                      Tooltip = "Off/On",
                    }):AddColorPicker('ColorGrass', {
                    Default = Color3.fromRGB(93, 111, 55),
                    Title = 'Changer Color Grass',
                  })

                  Toggles.CLRG:OnChanged(function(T)
                  if T == true then
                    GRCEND = true
                    local SetColor = Terrain:SetMaterialColor(Enum.Material.Grass,GCEN)
                  elseif T == false then
                    GRCEND = false
                    local SetColor = Terrain:SetMaterialColor(Enum.Material.Grass,Color3.fromRGB(93, 111, 55))
                  end
                  end)
                  Options.ColorGrass:OnChanged(function(Grass1)
                  if GRCEND == true then
                    GCEN = Grass1
                    local SetColor = Terrain:SetMaterialColor(Enum.Material.Grass, Grass1)
                  else

                  end
                  end)
                end
              end
            end
          end
        end

        --// Combat Tab
        do
          local AimlockTab = Tabs.CombatTab:AddLeftGroupbox('Aimlock')
          do
            --// Aimlock
            do
              AimlockTab:AddToggle('Aimlock_Toggle', {Text = 'Toggle', Default = false}):AddKeyPicker('Aimlock_Holding', {Default = 'E', SyncToggleState = false, Mode = 'Hold', Text = 'Aimlock', NoUI = false,})
              AimlockTab:AddDivider()
              AimlockTab:AddDropdown('Aimlock_Method', {Values = { 'camera', 'mousemoverel', 'mousemoveabs' }, Default = 1, Multi = false, Text = 'Method'})
              AimlockTab:AddDivider()
              AimlockTab:AddToggle('Aimlock_IgnoreTeammates', {Text = 'Team Check', Default = false})
              AimlockTab:AddSlider('Aimlock_AimSpeed', {Text = 'Aim Speed: ', Default = 1, Min = 0.1, Max = 1, Rounding = 2, Compact = true, Tooltip = "Lesser value means more smooth"})
              AimlockTab:AddDivider()
              AimlockTab:AddToggle('Aimlock_TargetClosestPart', {Text = 'Target Closest Body Part', Default = false})
              AimlockTab:AddToggle('Aimlock_TargetLock', {Text = 'Target Lock', Default = false, Tooltip = "Locks onto one player without flicking to others"})
              AimlockTab:AddDropdown('Aimlock_TargetPart', {Values = { 'Head', 'HumanoidRootPart', "LeftHand", "RightHand", "LeftFoot", "RightFoot", "FrontRotor" }, Default = 1, Multi = false, Text = 'Target Part'})
            end
          end
        end

        --// Player Tab
        do
          local PlayerTabBox = Tabs.PlayerTab:AddLeftTabbox('Player')
          local PlayerModsTab = PlayerTabBox:AddTab('Player')

          local FakeLagTabBox = Tabs.PlayerTab:AddLeftTabbox('Fake Lag')
          local FakeLagTab = FakeLagTabBox:AddTab('Fake Lag')

          local ChatTabBox = Tabs.PlayerTab:AddRightTabbox('Chat Spam')
          local ChatTab = ChatTabBox:AddTab('Chat Spam')

          local CameraTabBox = Tabs.PlayerTab:AddRightTabbox('Camera')
          local CameraModsTab = CameraTabBox:AddTab('Camera')

          do
            --// Player Tab
            do
              PlayerModsTab:AddSlider('Player_WalkSpeedValue', {Text = 'Speed: ', Default = 19, Min = 0, Max = 65, Rounding = 1, Compact = true})
              PlayerModsTab:AddToggle('Player_JumpPowerToggle', {Text = 'Enable JumpPower', Default = false, Tooltip = "Extremely Risky"})
              PlayerModsTab:AddSlider('Player_JumpPowerValue', {Text = 'Jump Power: ', Default = 50, Min = 0, Max = 100, Rounding = 1, Compact = true})
              local User = game:GetService("UserInputService")
              local player = game:GetService("Players").LocalPlayer
              local GuiService = game:GetService("StarterGui")
              local mouse = game.Players.LocalPlayer:GetMouse()
              Speed_1 = -1
              local holdingWKey = false
              local holdingSKey = false
              local holdingAKey = false
              local holdingDKey = false
              local holdingSpaceKey = false
              local holdingControlKey = false

              local cheatrt1 =false

              PlayerModsTab:AddLabel('SpeedHack'):AddKeyPicker('Fly', {
                Default = 'Z',
                SyncToggleState = false,
                Mode = 'Toggle',
                Text = 'SpeedHack',
                NoUI = false,
              })

              Options.Fly:OnClick(function()
              if cheatrt1 == false then
                if startup == true then
                  cheatrt1 = true
                  startup = false

                else
                  startup = true
                  GuiService:SetCore("SendNotification", {Title = "Speed", Text = "Speed is now enabled"})

                  local brick = Instance.new("Part", workspace)
                  brick.Size = Vector3.new(3, 2, 3)
                  brick.CFrame = player.Character.HumanoidRootPart.CFrame + Vector3.new(0, -2, 0)
                  brick.Transparency = 1
                  brick.Anchored = true
                  brick.Name = "Brick"

                end
              elseif cheatrt1 == true then
                cheatrt1 = false
                brick:remove()
                startup = false
                for i = 1, math.huge do
                  brick.CFrame = player.Character.HumanoidRootPart.CFrame + Vector3.new(0, -4, 0)
                  wait(0)

                end
              end
              end)

              PlayerModsTab:AddSlider('SPDFL', {
                Text = 'SpeedValue',
                Default = -1,
                Min = 0,
                Max = -10,
                Rounding = 1,
                Compact = true,
              }):OnChanged(function(t)
              Speed_1 = t
              end)

              game:GetService("RunService").Stepped:connect(
              function()
                if startup then
                  if WHeld == true then
                    player.Character.HumanoidRootPart.CFrame =
                    player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, Speed_1)
                  end
                end
              end
              )

              game:GetService("RunService").Stepped:connect(
              function()
                if startup then
                  if SHeld == true then
                    player.Character.HumanoidRootPart.CFrame =
                    player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -Speed_1)
                  end
                end
              end
              )

              game:GetService("RunService").Stepped:connect(
              function()
                if startup then
                  if AHeld == true then
                    player.Character.HumanoidRootPart.CFrame =
                    player.Character.HumanoidRootPart.CFrame * CFrame.new(Speed_1, 0, 0)
                  end
                end
              end
              )

              game:GetService("RunService").Stepped:connect(
              function()
                if startup then
                  if DHeld == true then
                    player.Character.HumanoidRootPart.CFrame =
                    player.Character.HumanoidRootPart.CFrame * CFrame.new(-Speed_1, 0, 0)
                  end
                end
              end
              )

              game:GetService("RunService").Stepped:connect(
              function()
                if startup then
                  if SpaceHeld == true then
                    player.Character.HumanoidRootPart.CFrame =
                    player.Character.HumanoidRootPart.CFrame * CFrame.new(0, -Speed_1, 0)
                  end
                end
              end
              )

              game:GetService("RunService").Stepped:connect(
              function()
                if startup then
                  if ControlHeld == true then
                    player.Character.HumanoidRootPart.CFrame =
                    player.Character.HumanoidRootPart.CFrame * CFrame.new(0, Speed_1, 0)
                  end
                end
              end
              )

              User.InputBegan:Connect(
              function(inputObject)
                if (inputObject.KeyCode == Enum.KeyCode.W) then
                  holdingWKey = true
                  WHeld = true
                end

                if (inputObject.KeyCode == Enum.KeyCode.S) then
                  holdingSKey = true
                  SHeld = true
                end

                if (inputObject.KeyCode == Enum.KeyCode.A) then
                  holdingAKey = true
                  AHeld = true
                end

                if (inputObject.KeyCode == Enum.KeyCode.D) then
                  holdingDKey = true
                  DHeld = true
                end
                if (inputObject.KeyCode == Enum.KeyCode.LeftControl) then
                  holdingControlKey = true
                  ControlHeld = true
                end

                if (inputObject.KeyCode == Enum.KeyCode.Space) then
                  holdingSpaceKey = true
                  SpaceHeld = true
                end

                if (inputObject.KeyCode == Enum.KeyCode.W) then
                  holdingUKey = true
                  WHeld = true
                end
              end
              )

              User.InputEnded:Connect(
              function(inputObject)
                if (inputObject.KeyCode == Enum.KeyCode.W) then
                  holdingWKey = false
                  WHeld = false
                end

                if (inputObject.KeyCode == Enum.KeyCode.S) then
                  holdingSKey = false
                  SHeld = false
                end

                if (inputObject.KeyCode == Enum.KeyCode.A) then
                  holdingAKey = false
                  AHeld = false
                end

                if (inputObject.KeyCode == Enum.KeyCode.D) then
                  holdingDKey = false
                  DHeld = false
                end

                if (inputObject.KeyCode == Enum.KeyCode.LeftControl) then
                  holdingShiftKey = false
                  ControlHeld = false
                end

                if (inputObject.KeyCode == Enum.KeyCode.Space) then
                  holdingSpaceKey = false
                  SpaceHeld = false
                end
              end
              )
            end

            --// Fake Lag
            do
              FakeLagTab:AddToggle('FakeLag_Toggle', {Text = 'Toggle', Default = false, Tooltip = "Extremely Risky"})
              FakeLagTab:AddSlider('FakeLag_Amount', {Text = 'time: ', Default = 1, Min = 0, Max = 100, Rounding = 0, Compact = true})
            end

            --// Chat Spam
            do
              ChatTab:AddToggle('Player_ChatSpam', {Text = 'Chat Spam', Default = false})
              ChatTab:AddDivider()
              ChatTab:AddSlider('Player_ChatSpamDelay', {Text = 'Spam Delay [s]', Default = 1, Min = 0, Max = 10, Rounding = 2, Compact = true})
              ChatTab:AddInput('Player_ChatSpamMessage', {Default = 'BurnHub > OCTODOOK  -  .gg/luaguard', Numeric = false, Finished = true, Text = 'Chat Spam Message', Placeholder = 'Text to Spam'})

              LPH_JIT_ULTRA(function()
              task.spawn(function()
              while true do
                wait(Options.Player_ChatSpamDelay.Value)
                if Toggles.Player_ChatSpam.Value then
                  utility.services.replicatedstorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(Options.Player_ChatSpamMessage.Value, "All")
                end
              end
              end)
              end)()
            end

            --Camera Tab
            do
              CameraModsTab:AddToggle('Camera_FOVToggle', {Text = 'Enable Field of View', Default = false})
              CameraModsTab:AddSlider('Camera_FOVValue', {Text = 'FOV: ', Default = 70, Min = 0, Max = 120, Rounding = 0, Compact = true})

              Toggles.Camera_FOVToggle:OnChanged(function()
              if Toggles.Camera_FOVToggle.Value then
                camera.FieldOfView = Options.Camera_FOVValue.Value
              else
                camera.FieldOfView = 70
              end
              end)

              Options.Camera_FOVValue:OnChanged(function()
              if Toggles.Camera_FOVToggle.Value then
                camera.FieldOfView = Options.Camera_FOVValue.Value
              end
              end)

              CameraModsTab:AddToggle('Camera_ZoomToggle', {Text = 'Enable Zoom', Default = false}):AddKeyPicker('Camera_ZoomHolding', {Default = 'MB2', SyncToggleState = false, Mode = 'Hold', Text = 'Zoom Keybind', NoUI = false,})
              CameraModsTab:AddSlider('Camera_ZoomValue', {Text = 'Zoom FOV: ', Default = 30, Min = 0, Max = 120, Rounding = 0, Compact = true})

              LPH_JIT_ULTRA(function()
              camera:GetPropertyChangedSignal("FieldOfView"):Connect(function()
              if Toggles.Camera_FOVToggle.Value then
                camera.FieldOfView = Options.Camera_FOVValue.Value
              end

              if Toggles.Camera_ZoomToggle.Value and Options.Camera_ZoomHolding:GetState() then
                camera.FieldOfView = Options.Camera_ZoomValue.Value
              end
              end)
              end)()
            end
          end
        end

        --// Exploits

        do
          local ExploitsTabBox = Tabs.ExploitsTab:AddLeftTabbox('Dupe Tool')
          local ExploitsTab = ExploitsTabBox:AddTab('Dupe Tool')

          local DupeButton = ExploitsTab:AddButton('Dupe', function()
          if _G.candupe then
            game:GetService("ReplicatedStorage").Remotes.HandleDowning:FireServer(_G.u17, _G.u18, _G.u19)
          end

          end)

          local ResetCharacter = ExploitsTab:AddButton('ResetCharacter', function()
          if game.Players.LocalPlayer.Character then
            local dedspot = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame
            game.Players.LocalPlayer.Character:BreakJoints()
            delay(0.1,function()
            game:GetService("ReplicatedStorage").Remotes.Respawn:FireServer("Respawn")
            end)
            delay(0.5,function()
            repeat
              wait()
            until game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = dedspot
            end)
          end

          end)

          ExploitsTab:AddToggle('DupeTime', {
            Text = 'DupeTimer',
            Default = false, -- Default value (true / false)
            Tooltip = 'This is a tooltip',
          })


          Toggles.DupeTime:OnChanged(function(DupeTimer1)
          _G.nobagtimer = DupeTimer1
          end)

          ExploitsTab:AddLabel('1.Put all your stuff in chest\n2.ResetCharacter.\n3.Click on - DupeTime \n4.Click on Dupe\nDone', true)

          local ExploitsTabBox = Tabs.ExploitsTab:AddRightTabbox('Spawn Items')
          local ExploitsTab = ExploitsTabBox:AddTab('Spawn Items')

          local MyButton = ExploitsTab:AddButton('Spawn AK47', function()
          local args = {
            [1] = 28,
            [2] = 1,
            [3] = "500/Default/0/9999999/14/060/"
          }

          game:GetService("ReplicatedStorage").Remotes.DropItem:FireServer(unpack(args))
          end)
        end
      end
    end

    --// Functionality, Main Loop, Functions
    LPH_JIT_ULTRA(function()
    utility.functions.closest_to_mouse = function(type)
    local target = nil
    local maxDist = math_huge

    for _,v in ipairs(utility.services.players:GetPlayers()) do
      if v ~= localplayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Head") then
        local pos, onScreen
        if type == "aimbot" then
          pos, onScreen = camera:WorldToViewportPoint(v.Character[Options.Aimlock_TargetPart.Value].Position)

          if onScreen then
            local dist = (vector2_new(pos.X, pos.Y - getguiinset(utility.services.guiservice).Y) - vector2_new(mouse.X, mouse.Y)).Magnitude
            if dist <= maxDist then
              if Toggles.FOVCircle_Toggle.Value then
                if Toggles.Aimlock_IgnoreTeammates.Value then
                  if dist < Options.FOVCircle_Radius.Value and localplayer.TeamColor ~= v.TeamColor then
                    maxDist = dist
                    target = v
                  end
                else
                  if dist < Options.FOVCircle_Radius.Value then
                    maxDist = dist
                    target = v
                  end
                end
              else
                if Toggles.Aimlock_IgnoreTeammates.Value then
                  if dist <= maxDist and localplayer.TeamColor ~= v.TeamColor then
                    maxDist = dist
                    target = v
                  end
                else
                  if dist <= maxDist then
                    maxDist = dist
                    target = v
                  end
                end
              end
            end
          end
        elseif type == "snapline" then
          pos, onScreen = camera:WorldToViewportPoint(v.Character[Options.Snapline_TargetPart.Value].Position)

          if onScreen then
            local dist = (vector2_new(pos.X, pos.Y - getguiinset(utility.services.guiservice).Y) - vector2_new(mouse.X, mouse.Y)).Magnitude
            if dist <= maxDist then
              maxDist = dist
              target = v
            end
          end
        end
      end
    end
    return target
  end

  utility.functions.get_closest_bone = function(player_inst)
  local closest_bone = nil
  local maxDist = math.huge

  for i,v in pairs(player_inst.Character:GetChildren()) do
    if v:IsA("MeshPart") or v:IsA("Part") then
      local pos, onScreen = camera:WorldToViewportPoint(v.Position)
      if onScreen then
        local dist = (vector2_new(pos.X, pos.Y - getguiinset(utility.services.guiservice).Y) - vector2_new(mouse.X, mouse.Y)).Magnitude
        if dist <= maxDist then
          maxDist = dist
          closest_bone = v
        end
      end
    end
  end

  return closest_bone
end

local last_fakelag_tick = 0
do
  utility.services.runservice.heartbeat:Connect(function()
  if Toggles.FakeLag_Toggle.Value then
    if localplayer.Character and localplayer.Character:FindFirstChild("Head") and localplayer.Character:FindFirstChild("Humanoid") and localplayer.Character:FindFirstChild("Humanoid").Health > 0 then
      if last_fakelag_tick <= Options.FakeLag_Amount.Value then
        sethiddenproperty(localplayer.Character.HumanoidRootPart, "NetworkIsSleeping", true)
      else
        last_fakelag_tick = 0
      end
    end
  end
  end)

  utility.services.runservice.RenderStepped:Connect(function(step)
  if Options.Aimlock_Method.Value == "camera" and Toggles.Aimlock_Toggle.Value and Options.Aimlock_Holding:GetState() and utility.functions.closest_to_mouse("aimbot") ~= nil then
    if Toggles.Aimlock_TargetLock.Value and utility.aimbot.target then
      camera.CFrame = Options.Aimlock_AimSpeed.Value ~= 1 and camera.CFrame:lerp(CFrame.lookAt(camera.CFrame.p, utility.aimbot.target.Character[Toggles.Aimlock_TargetClosestPart.Value and tostring(utility.functions.get_closest_bone(utility.aimbot.target)) or Options.Aimlock_TargetPart.Value].Position), Options.Aimlock_AimSpeed.Value) or CFrame.lookAt(camera.CFrame.p, utility.aimbot.target.Character[Toggles.Aimlock_TargetClosestPart.Value and tostring(utility.functions.get_closest_bone(utility.aimbot.target)) or Options.Aimlock_TargetPart.Value].Position)
    elseif Toggles.Aimlock_TargetLock.Value and not utility.aimbot.target then
      utility.aimbot.target = utility.functions.closest_to_mouse("aimbot")
      camera.CFrame = Options.Aimlock_AimSpeed.Value ~= 1 and camera.CFrame:lerp(CFrame.lookAt(camera.CFrame.p, utility.aimbot.target.Character[Toggles.Aimlock_TargetClosestPart.Value and tostring(utility.functions.get_closest_bone(utility.aimbot.target)) or Options.Aimlock_TargetPart.Value].Position), Options.Aimlock_AimSpeed.Value) or CFrame.lookAt(camera.CFrame.p, utility.aimbot.target.Character[Toggles.Aimlock_TargetClosestPart.Value and tostring(utility.functions.get_closest_bone(utility.aimbot.target)) or Options.Aimlock_TargetPart.Value].Position)
    else
      camera.CFrame = Options.Aimlock_AimSpeed.Value ~= 1 and camera.CFrame:lerp(CFrame.lookAt(camera.CFrame.p, utility.functions.closest_to_mouse("aimbot").Character[Toggles.Aimlock_TargetClosestPart.Value and tostring(utility.functions.get_closest_bone(utility.functions.closest_to_mouse("aimbot"))) or Options.Aimlock_TargetPart.Value].Position), Options.Aimlock_AimSpeed.Value) or CFrame.lookAt(camera.CFrame.p,utility.functions.closest_to_mouse("aimbot").Character[Toggles.Aimlock_TargetClosestPart.Value and tostring(utility.functions.get_closest_bone(utility.functions.closest_to_mouse("aimbot"))) or Options.Aimlock_TargetPart.Value].Position)
    end
  elseif Options.Aimlock_Method.Value == "mousemoveabs" and Toggles.Aimlock_Toggle.Value and Options.Aimlock_Holding:GetState() and utility.functions.closest_to_mouse("aimbot") ~= nil then
    if Toggles.Aimlock_TargetLock.Value and utility.aimbot.target and utility.aimbot.target.Character then
      local Vector, onScreen = camera:WorldToViewportPoint(utility.aimbot.target.Character.Head.Position)
      mousemoveabs(Vector.X, Vector.Y)
    elseif Toggles.Aimlock_TargetLock.Value and not utility.aimbot.target and utility.functions.closest_to_mouse("aimbot").Character then
      utility.aimbot.target = utility.functions.closest_to_mouse("aimbot")
      local Vector, onScreen = camera:WorldToViewportPoint(utility.functions.closest_to_mouse("aimbot").Character.Head.Position)
      mousemoveabs(Vector.X, Vector.Y)
    else
      if utility.functions.closest_to_mouse("aimbot").Character then
        local Vector, onScreen = camera:WorldToViewportPoint(utility.functions.closest_to_mouse("aimbot").Character.Head.Position)
        mousemoveabs(Vector.X, Vector.Y)
      end
    end
  elseif Options.Aimlock_Method.Value == "mousemoverel" and Toggles.Aimlock_Toggle.Value and Options.Aimlock_Holding:GetState() and utility.functions.closest_to_mouse("aimbot") ~= nil then
    if Toggles.Aimlock_TargetLock.Value and utility.aimbot.target and utility.aimbot.target.Character then
      local Vector, onScreen = camera:WorldToViewportPoint(utility.aimbot.target.Character.Head.Position)
      mousemoverel((Vector.X - utility.services.userinputservice:GetMouseLocation().X) * Options.Aimlock_AimSpeed.Value, (Vector.Y - utility.services.userinputservice:GetMouseLocation().Y) * Options.Aimlock_AimSpeed.Value)
    elseif Toggles.Aimlock_TargetLock.Value and not utility.aimbot.target and utility.functions.closest_to_mouse("aimbot").Character then
      utility.aimbot.target = utility.functions.closest_to_mouse("aimbot")
      local Vector, onScreen = camera:WorldToViewportPoint(utility.functions.closest_to_mouse("aimbot").Character.Head.Position)
      mousemoverel((Vector.X - utility.services.userinputservice:GetMouseLocation().X) * Options.Aimlock_AimSpeed.Value, (Vector.Y - utility.services.userinputservice:GetMouseLocation().Y) * Options.Aimlock_AimSpeed.Value)
    else
      if utility.functions.closest_to_mouse("aimbot").Character then
        local Vector, onScreen = camera:WorldToViewportPoint(utility.functions.closest_to_mouse("aimbot").Character.Head.Position)
        mousemoverel((Vector.X - utility.services.userinputservice:GetMouseLocation().X) * Options.Aimlock_AimSpeed.Value, (Vector.Y - utility.services.userinputservice:GetMouseLocation().Y) * Options.Aimlock_AimSpeed.Value)
      end
    end
  end

  if utility.functions.closest_to_mouse("aimbot") ~= nil and Toggles.Aimlock_Toggle.Value and not Options.Aimlock_Holding:GetState() then
    if utility.aimbot.target ~= nil then
      utility.aimbot.target = utility.functions.closest_to_mouse("aimbot")
    end
  end

  if Toggles.Snapline_Toggle.Value then
    local ClosestPlayer = utility.functions.closest_to_mouse("snapline")

    if ClosestPlayer ~= nil and ClosestPlayer.Character and ClosestPlayer.Character:FindFirstChild("HumanoidRootPart") and ClosestPlayer.Character:FindFirstChild("Head") then
      local snapVector, snapOnScreen = camera:WorldToViewportPoint(ClosestPlayer.Character[Options.Snapline_TargetPart.Value].Position)
      if snapOnScreen then
        Snapline_Object.From = vector2_new(utility.services.userinputservice:GetMouseLocation().X, utility.services.userinputservice:GetMouseLocation().Y)
        Snapline_Object.To = vector2_new(snapVector.X, snapVector.Y)
        Snapline_Object.Visible = true
      else
        Snapline_Object.Visible = false
      end
    else
      Snapline_Object.Visible = false
    end
  else
    Snapline_Object.Visible = false
  end

  if Toggles.Lighting_CustomAmbient.Value then
    utility.services.lighting.Ambient = Options.Lighting_CustomAmbientColor.Value
  end

  if Toggles.Lighting_CustomTimeToggle.Value then
    utility.services.lighting.ClockTime = Options.Lighting_CustomTimeValue.Value
  end

  if Toggles.Player_JumpPowerToggle.Value then
    if localplayer.Character and localplayer.Character:FindFirstChild("Humanoid") then
      localplayer.Character:FindFirstChild("Humanoid").JumpPower = Options.Player_JumpPowerValue.Value
    end
  end

  if Toggles.Camera_ZoomToggle.Value and Options.Camera_ZoomHolding:GetState() then
    camera.FieldOfView = Options.Camera_ZoomValue.Value
  elseif Toggles.Camera_FOVToggle.Value then
    camera.FieldOfView = Options.Camera_FOVValue.Value
  end

  if Toggles.UISettings_WatermarkVisibility.Value then
    Library:SetWatermark(('Burn Hub | Rage | %s fps | %sms'):format(tostring(math.round(1 / step)), tostring(math.round(localplayer:GetNetworkPing() * 2 * 1000))))
  end
  end)
end
end)()

-- Kill All

-- Gun Mods

for i,v in pairs(require(game.ReplicatedStorage.Modules.ToolInfo)) do
  if v.ShootTime and v.MaxAmmo and v.MaxSpread and v.BulletSpeed and v.BulletDrop and v.FlashSize and v.Range and v.RangeStart and v.BulletT then
    v.ShootTime = 0
    v.MaxAmmo = math.huge
    v.ChangeSpread = true
    v.Auto = true
    v.RecoilReset = 100
    v.MaxSpread = 0
    v.FlashSize = 0
    v.BulletDrop = 0
    v.BulletSpeed = 100000
    v.RangeStart = 100000
    v.Range = 100000
    v.BulletT = 10000
  end
end

-- Silent Aim

local old; old = hookfunction(string.len, function(d)
if tostring(getcallingscript()) == "ClientMain" and old(d) <= 3 then
  return 5;
  end;
  return old(d)
  end);

  local __index; __index = hookmetamethod(game, "__index", function(self, prop)
  if tostring(self) == "HumanoidRootPart" and prop == "CFrame" and tostring(getcallingscript()) == "ClientMain" then
    return;
    end;
    return __index(self, prop)
    end)

    --

    --// Menu Window & Config List
    Library:SetWatermark('Burn Hub | private | ')
    Library:OnUnload(function()
    esp.Unload()

    for i,v in pairs(Toggles) do
      v.Value = false
    end

    Library.Unloaded = true
    end)

    local MenuGroup = Tabs.UISettings:AddRightGroupbox('Menu')

    MenuGroup:AddButton('Unload Script', function() Library:Unload() end)

    MenuGroup:AddButton('Panic Button', function()
    for i,v in pairs(Toggles) do
      v:SetValue(false)
    end
    end)

    MenuGroup:AddButton('Copy Join Code', function()
    setclipboard(("game:GetService('TeleportService'):TeleportToPlaceInstance(%s, '%s')"):format(game.PlaceId, game.JobId))
    end)

    MenuGroup:AddButton('Rejoin', function()
    game:GetService('TeleportService'):TeleportToPlaceInstance(game.PlaceId, game.JobId)
    end)

    MenuGroup:AddDivider()

    MenuGroup:AddToggle('UISettings_WatermarkVisibility', {Text = 'Show Watermark', Default = true}):OnChanged(function()
    Library:SetWatermarkVisibility(Toggles.UISettings_WatermarkVisibility.Value)
    end)

    MenuGroup:AddToggle('UISettings_KeybindFrameVisibility', {Text = 'Show Keybind Frame', Default = true}):OnChanged(function()
    Library.KeybindFrame.Visible = Toggles.UISettings_KeybindFrameVisibility.Value
    end)

    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'RightControl', NoUI = true, Text = 'Menu keybind' })
    Library.ToggleKeybind = Options.MenuKeybind
    SaveManager:SetLibrary(Library)
    SaveManager:SetFolder('Oblivity/Private/Universal')
    SaveManager:BuildConfigSection(Tabs.UISettings)

    --// Theme Editor

    ThemeManager:SetLibrary(Library)
    SaveManager:IgnoreThemeSettings()
    ThemeManager:SetFolder('Oblivity/Private/Universal/Themes')
    ThemeManager:ApplyToTab(Tabs.UISettings)
  end
